//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WS_Adobe_Gen.etr_konverze_pdfa {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="etr_konverze_pdfaSoapBinding", Namespace="http://adobe.com/idp/services")]
    public partial class ETR_etr_konverze_pdfaService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback invokeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ETR_etr_konverze_pdfaService() {
            this.Url = global::WS_Adobe_Gen.Properties.Settings.Default.WS_Adobe_Gen_etr_konverze_pdfa_ETR_etr_konverze_pdfaService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event invokeCompletedEventHandler invokeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("invoke", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("StatusKod")]
        public string invoke(BLOB docIN, int forms, [System.Xml.Serialization.XmlIgnoreAttribute()] bool formsSpecified, int podepsat, [System.Xml.Serialization.XmlIgnoreAttribute()] bool podepsatSpecified, string podpis_pole, TSPOptionSpec razitko, string typ, Credential znacka, out string StatusText, out BLOB docOUT, out bool isPDF, out BLOB log) {
            object[] results = this.Invoke("invoke", new object[] {
                        docIN,
                        forms,
                        formsSpecified,
                        podepsat,
                        podepsatSpecified,
                        podpis_pole,
                        razitko,
                        typ,
                        znacka});
            StatusText = ((string)(results[1]));
            docOUT = ((BLOB)(results[2]));
            isPDF = ((bool)(results[3]));
            log = ((BLOB)(results[4]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void invokeAsync(BLOB docIN, int forms, bool formsSpecified, int podepsat, bool podepsatSpecified, string podpis_pole, TSPOptionSpec razitko, string typ, Credential znacka) {
            this.invokeAsync(docIN, forms, formsSpecified, podepsat, podepsatSpecified, podpis_pole, razitko, typ, znacka, null);
        }
        
        /// <remarks/>
        public void invokeAsync(BLOB docIN, int forms, bool formsSpecified, int podepsat, bool podepsatSpecified, string podpis_pole, TSPOptionSpec razitko, string typ, Credential znacka, object userState) {
            if ((this.invokeOperationCompleted == null)) {
                this.invokeOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvokeOperationCompleted);
            }
            this.InvokeAsync("invoke", new object[] {
                        docIN,
                        forms,
                        formsSpecified,
                        podepsat,
                        podepsatSpecified,
                        podpis_pole,
                        razitko,
                        typ,
                        znacka}, this.invokeOperationCompleted, userState);
        }
        
        private void OninvokeOperationCompleted(object arg) {
            if ((this.invokeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invokeCompleted(this, new invokeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class BLOB {
        
        private string contentTypeField;
        
        private byte[] binaryDataField;
        
        private string attachmentIDField;
        
        private string remoteURLField;
        
        /// <remarks/>
        public string contentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] binaryData {
            get {
                return this.binaryDataField;
            }
            set {
                this.binaryDataField = value;
            }
        }
        
        /// <remarks/>
        public string attachmentID {
            get {
                return this.attachmentIDField;
            }
            set {
                this.attachmentIDField = value;
            }
        }
        
        /// <remarks/>
        public string remoteURL {
            get {
                return this.remoteURLField;
            }
            set {
                this.remoteURLField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class Credential {
        
        private string aliasField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class TSPOptionSpec {
        
        private System.Nullable<HashAlgorithm> tspHashAlgorithmField;
        
        private System.Nullable<RevocationCheckStyle> tspRevocationCheckStyleField;
        
        private bool tspSendNonceField;
        
        private string tspServerPasswordField;
        
        private string tspServerURLField;
        
        private string tspServerUsernameField;
        
        private System.Nullable<int> tspSizeField;
        
        private bool useExpiredTimestampsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<HashAlgorithm> tspHashAlgorithm {
            get {
                return this.tspHashAlgorithmField;
            }
            set {
                this.tspHashAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<RevocationCheckStyle> tspRevocationCheckStyle {
            get {
                return this.tspRevocationCheckStyleField;
            }
            set {
                this.tspRevocationCheckStyleField = value;
            }
        }
        
        /// <remarks/>
        public bool tspSendNonce {
            get {
                return this.tspSendNonceField;
            }
            set {
                this.tspSendNonceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string tspServerPassword {
            get {
                return this.tspServerPasswordField;
            }
            set {
                this.tspServerPasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string tspServerURL {
            get {
                return this.tspServerURLField;
            }
            set {
                this.tspServerURLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string tspServerUsername {
            get {
                return this.tspServerUsernameField;
            }
            set {
                this.tspServerUsernameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> tspSize {
            get {
                return this.tspSizeField;
            }
            set {
                this.tspSizeField = value;
            }
        }
        
        /// <remarks/>
        public bool useExpiredTimestamps {
            get {
                return this.useExpiredTimestampsField;
            }
            set {
                this.useExpiredTimestampsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public enum HashAlgorithm {
        
        /// <remarks/>
        MD5,
        
        /// <remarks/>
        SHA1,
        
        /// <remarks/>
        SHA256,
        
        /// <remarks/>
        SHA384,
        
        /// <remarks/>
        SHA512,
        
        /// <remarks/>
        RIPEMD160,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public enum RevocationCheckStyle {
        
        /// <remarks/>
        NoCheck,
        
        /// <remarks/>
        BestEffort,
        
        /// <remarks/>
        CheckIfAvailable,
        
        /// <remarks/>
        AlwaysCheck,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")]
    public delegate void invokeCompletedEventHandler(object sender, invokeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invokeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invokeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string StatusText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public BLOB docOUT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BLOB)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool isPDF {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public BLOB log {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BLOB)(this.results[4]));
            }
        }
    }
}

#pragma warning restore 1591